Role: You are Replit Agent 3, an autonomous full-stack builder that plans ➜ codes ➜ runs browser tests ➜ self-fixes ➜ checkpoints ➜ deploys. Your output must be a production-ready EduShepherd app replicating Shepherd Study’s observed features & UX (Doc Chat/RAG, AI Tutor, Notes, Quizzes, Flashcards, Resources, Settings/Privacy). Follow the Prompt Strategy Foundations and per-module templates below. Use end-to-end tests and SSE streaming. 
Replit Blog
+2
MDN Web Docs
+2

Grounding (from prior audit):

Primary modules observed: Doc Chat (RAG), AI Tutor, Resources/Folders, Notes; quick actions: Summary, Generate Quiz, Generate Flashcards; citations UX with timecodes; multi-source chat. Latency bands & session quirks recorded. Use these to mirror UX and behaviors. 

shepherd_tech_audit

Stack inference baseline: Next.js + React + Tailwind (frontend), Node/TS backend, GraphQL/REST with SSE streaming, JWT cookie auth, Vercel-style hosting. RAG: OpenAI text-embedding-3-small, Pinecone (+ Qdrant fallback), Cohere Rerank, top_k=8, citation-guardrails. Pedagogy templates (Explain-then-Ask, Worked Example→Practice→Reflection, Socratic Ladder, Feynman Summary). 

shepherd_tech_audit

0) Global Engineering Directives

Frontend: Next.js App Router, React, Tailwind, shadcn/ui, Zustand. Must support streaming UI and 3-panel Doc Chat layout. 
Next.js

Backend: Node.js (TypeScript) with Fastify or Express; choose GraphQL or REST but keep clean layering and DTOs.

DB/ORM: PostgreSQL + Prisma. Provide schema.prisma, migrations, and seed script. 
Prisma

Vector Store: Pinecone namespaces per document; fallback Qdrant (self-host via docker) if Pinecone key absent. 
Pinecone Docs

Embeddings: OpenAI text-embedding-3-small. 
OpenAI Platform

Reranker: Cohere Rerank (v3+/3.5) for semantic rerank. 
Cohere Documentation
+1

LLM: GPT-4o for generation; server-side SSE streaming to client EventSource. 
MDN Web Docs
+1

Auth: NextAuth/Auth.js JWT cookies; secure cookie flags; CSRF on state-changing endpoints. 
NextAuth
+1

Files: S3-compatible storage (signed URLs) for PDF/PPTX/DOCX/MP3/MP4.

Queues: BullMQ (Redis) for ingestion/indexing jobs.

Observability: PostHog events + Sentry error wiring (keys optional).

Runtime/Deploy: Dockerfiles for API+Web, docker-compose.yml for Postgres+Redis+Qdrant. Provide Vercel/Render instructions.

.env.example (must):

DATABASE_URL=
NEXTAUTH_SECRET=
AUTH_TRUSTED_ORIGIN=http://localhost:3000
OPENAI_API_KEY=
COHERE_API_KEY=
PINECONE_API_KEY=
PINECONE_ENV=
QDRANT_URL=
QDRANT_API_KEY=
S3_ENDPOINT=
S3_BUCKET=
S3_ACCESS_KEY_ID=
S3_SECRET_ACCESS_KEY=
REDIS_URL=
SENTRY_DSN=
POSTHOG_KEY=


Agent 3 build loop: Use plan → build → run browser tests → self-fix → checkpoint after each module. 
Replit Blog

1) Prompt Strategy Foundations (RAG + Pedagogy)

Always apply these meta-rules inside your generators:

Role & Contract: Every generator declares a role (e.g., DocChatAssistant, AIPedagogyTutor, QuizFlashGen, NoteFormatter) and output contract (JSON schema/text block).

Grounding Discipline: Separate Retrieved Contexts (chunk text + source meta) from User Question. Generate only from retrieved content; if insufficient, refuse or ask for clarification. (Guardrail demanded by audit.) 

shepherd_tech_audit

Citations: Every factual claim carries square-bracket citations [source: page/time].

Reasoning: For non-trivial tasks, reason step-by-step internally; output concise, structured answers.

Self-Check: Post-generation validation: grounded? cited? consistent? If not, regenerate.

Length Control: Default answer ≤ ~300 tokens unless user requests detail.

Pedagogical Templates: AI Tutor adopts Explain-then-Ask, Worked Example→Practice→Reflection, Socratic, Feynman Summary variations (as per audit). 

shepherd_tech_audit

Streaming: Use SSE for chat; client renders token stream with EventSource. 
MDN Web Docs
+1

2) Data Model (Prisma — implement relations+indexes)

Entities (keys abbreviated):

User: id, email(unique), passwordHash/OAuth, planTier, createdAt, deletedAt

Settings: userId(PK/FK), model, temperature, theme, privacyDeleteOnSession

Folder: id, userId, name, parentId?

File: id, userId, folderId?, filename, url, fileType, createdAt

Document: id, userId, sourceType(pdf|pptx|docx|mp3|mp4|youtube|url), sourceUrl, status, meta

Chunk: id, documentId, text, startMeta(page/time), endMeta, vectorId/embeddingRef, extraMeta

ChatThread / ChatMessage: per doc-chat; role, content, citations[]

TutorSession / TutorMessage: subject/grade/topic + history

Quiz / QuizItem: items with rationale, bloomLevel, difficulty, citations[]

Flashcard: front/back/cloze, srs fields (intervalDays, ease, dueAt)

Note: id, userId, title, content(md/rich), templateType, timestamps

(Use Prisma with PostgreSQL connector.) 
Prisma

3) Modules — build → test → checkpoint (in order)
A) Auth & User Management

Backend

Endpoints (or GraphQL resolvers): register, login, refresh, delete.

Issue JWT cookies; secure flags; rotation; session retrieval helper. 
NextAuth
+1

Frontend

Pages: /login, /register, /profile (+ “Delete account”).

Protected routes HOC; session hydration.

Tests (must pass)

Register valid/invalid; login wrong creds; pre-login protected route blocked; delete cascades user data.

B) Resources / File Manager (Folders)

Backend

Folder CRUD; file upload (S3 signed URL); move/delete; search/sort by name/date.

Frontend

Page: Resources — folder list, Search for a folder…, Create New Folder, Recently viewed. (Reflect observed UI.) 

shepherd_tech_audit

Tests

Nested folder creation; move file; delete cascade; search correctness.

C) RAG Ingestion (Uploader, Indexer, Embeddings)

Ingestion

Accept: PDF/PPTX/DOCX/MP3/MP4, YouTube URL, generic URL.

Extract text + metadata (pages/timecodes).

Chunk: 512 tokens, overlap 64; persist chunk meta.

Embeddings: OpenAI text-embedding-3-small; store in Pinecone (namespace per doc). Fallback Qdrant if Pinecone not configured. 
OpenAI Platform
+1

Queue heavy jobs via BullMQ.

Tests

Small PDF + YT URL path; verify chunks & vectors created with meta.

D) Doc Chat (RAG)

Retrieval + Rerank + Generation

Query ➜ vector retrieve top_k=8 ➜ Cohere Rerank (v3/3.5) ➜ compose prompt ➜ GPT-4o generation ➜ SSE stream. 
Cohere Documentation
+2
Oracle Documentation
+2

Prompt (use exactly):

You are **DocChatAssistant**. Use only retrieved contexts.

Retrieved Contexts:
{for each chunk}
---
Source: {sourceName}, page/time: {meta}
Text: {text}
---

User Question: "{question}"

Instructions:
- Reason step-by-step internally.
- Answer concisely with citations [source: page/time] for each factual claim.
- If insufficient context, say: "I’m sorry, not enough data to answer confidently."
- End with 2–4 "Key takeaways" bullets.

Output JSON:
{ "answer": "...", "takeaways": ["...", "..."] }


Frontend

3-panel layout: Sources (left), Chat center (streaming bubbles), Actions right: Summary, Highlights, Pinned, Generate Quiz, Generate Flashcards. (Mirrors observed UI/labels & quick actions.) 

shepherd_tech_audit

Tests

Upload tiny PDF → factual Q → cited answer (1–3s normal).

Ambiguous Q → graceful refusal/clarify.

Multi-source cross-doc question; citations clickable to page/time.

E) AI Tutor (Ace-style pedagogy)

Prompt (use exactly):

You are **AIPedagogyTutor** for grade {grade}, subject {subject}, topic {topic}.
Question: "{question}"

Do:
1) Explain concept simply (2–4 short paragraphs).
2) Provide a worked example step-by-step.
3) Give a similar practice problem for the learner.
4) If the learner later responds, evaluate and give feedback.

Output JSON:
{ "explanation": "...", "worked_example": "...", "practice_prompt": "..." }


Backend

Endpoint accepts grade/subject/topic/question; save TutorSession/TutorMessage.

Frontend

Subject/grade/topic chips; input; chat UI; history with search (as observed); latency may be variable. 

shepherd_tech_audit

Tests

Algebra linear eq; Physics concept — structure enforced; history retrievable.

F) Summary / Highlights / Quick Actions

Summary Prompt (use exactly):

Role: DocChatSummarizer
Input: Retrieved chunks.
Task: Produce 5–8 bullets strictly from context. Then add 2–3 “Potential quiz ideas”.
Flag contradictions as: "Note: conflicting sources" with citations.


Highlights: Extract 3–6 key quotes/snippets with source meta.
Pinned: Allow user to pin messages/chunks to thread.

Tests

Summary contains only grounded bullets; quiz ideas plausible.

G) Quiz & Flashcards

Quiz Prompt (exact):

Role: QuizFlashGen
Mode: quiz
Context: {chunks with meta}

Produce 5 MCQs. Each:
- question
- options[4]
- correct
- rationale (why correct, why others not)
- bloom_level (remember/apply/analyze...)
- difficulty (easy/medium/hard)
- citations ["source: page/time"]

Return strict JSON array.


Flashcards Prompt (exact):

Role: QuizFlashGen
Mode: flashcard
Context: {chunks}

Produce 5 flashcards:
- front (question or cloze)
- back (concise explanation)
- optional: srs fields (interval_days, ease, due_at)
- citations
Return strict JSON array.


Frontend

Quiz taking page (submit → show correct + rationale + citation).

Flashcards reviewer (flip → next; optional SRS scheduling).

Tests

Generate from known doc; schema validates; distractors balanced; rationales grounded.

H) Notes (Templates + Editor + Export)

Templates: Record Lecture, Research Paper, Review Essay, Summarise Article (observed). Blank Note + Search + Sort by Newest. 

shepherd_tech_audit

Editor: TipTap/Lexical; headings, bold/italic, lists, links, code blocks; autosave debounce.

Export Prompt (internal):

Role: NoteFormatter
Given note content (rich/md), export to MD/DOCX/PDF.
Preserve headings, lists, links, code blocks; do not alter content.
For PDF, include title/date footer.


Tests

Create via template; edit; search; export; auth isolation.

I) Settings / Privacy / Data Export

Backend

GET/POST /api/settings, GET /api/export (ZIP/JSON), DELETE /api/account.

Fields: model (GPT-4o / fallback), temperature, theme, privacyDeleteOnSession.

Frontend

Model selector; temperature slider; theme toggle; Export My Data, Delete My Account (double confirm).

Tests

Persist settings; export contains user data entities; delete nukes data & blocks login.

4) Integration, Streaming & Routing

Next.js App Router structure with protected segments; layout with nav. 
Next.js

SSE server endpoint text/event-stream; client uses EventSource and incremental render. 
MDN Web Docs
+1

NextAuth/Auth.js JWT cookies; secure cookie flags; explain NEXTAUTH_SECRET. 
NextAuth

5) Testing & CI (Definition of Done)

Unit: parsers, DTOs, zod schemas for quiz/flashcards outputs.

Integration: upload→index→chat→summary→quiz→flashcards→notes→export flows.

Browser tests: run autonomous click-throughs for critical paths and self-fix regressions (Agent 3 feature). 
Replit Blog

Must-pass E2E Scenarios:

PDF upload → cited answer appears within typical latency window. 

shepherd_tech_audit

Tutor session completes with explanation→worked example→practice.

Quiz generated & taken; rationales + citations visible.

Flashcards generated & reviewed; optional SRS fields stored.

Note from template → export PDF/MD.

Full Export My Data; Delete Account wipes data.

6) Deployment

Provide Dockerfile (web+api) and docker-compose.yml (postgres+redis+qdrant).

Include Vercel/Render deploy notes in README.md.

Output a live preview URL (if possible) at the end.

7) Risk Guardrails (Agent-Specific)

Production-like destructive commands require explicit confirmation; keep daily backup + one-click restore to mitigate autonomous agent mishaps reported recently. 
The Times of India
+1

8) Repo Docs (generate)

README.md (setup, run, deploy)

ARCHITECTURE.md (RAG pipeline diagram, data-flow)

PROMPTS.md (include all role prompts above)

SECURITY.md (JWT cookies, CSRF, rate-limits)

Now start with Module A (Auth). Build → test → checkpoint → proceed.

Notes from prior audit to mirror UX/scope (for your internal reference only)

Doc Chat supported YouTube ingestion, multi-source, citations with timecodes; quick actions: Summary / Quiz / Flashcards. Some sessions showed blank navigation; engineer for robustness. 

shepherd_tech_audit

AI Tutor required selecting level + topic; latency sometimes >8s; keep non-blocking UI. 

shepherd_tech_audit

Notes screen had search, sort by newest, templates, Blank Note CTA. 

shepherd_tech_audit

Session info was captured (locale EN-IN); no visible plan/version in UI. 

session_info

Web sources used for stack behaviors

Replit Agent 3 autonomy + in-browser testing & fix loop. 
Replit Blog

Next.js App Router docs. 
Next.js

Prisma + PostgreSQL connector. 
Prisma

OpenAI embeddings text-embedding-3-small. 
OpenAI Platform

Cohere Rerank usage. 
Cohere Documentation

Pinecone namespaces / indexing overview. 
Pinecone Docs

SSE / EventSource (MDN + WHATWG). 
MDN Web Docs
+1

NextAuth/Auth.js JWT cookies. 
NextAuth
+1